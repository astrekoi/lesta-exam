x-shared-env: &shared-env
  POSTGRES_HOST: ${POSTGRES_HOST:-db}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_DB: ${POSTGRES_DB:-db}
  POSTGRES_USER: ${PGUSER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

x-restart-policy: &restart-policy
  restart: unless-stopped

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  db:
    <<: *restart-policy
    image: postgres:15-alpine
    container_name: exam_postgres
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-db}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    command: >
      postgres 
      -c max_connections=${POSTGRES_MAX_CONNECTIONS:-100}
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}
      -c work_mem=${POSTGRES_WORK_MEM:-4MB}
      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      -c wal_buffers=${POSTGRES_WAL_BUFFERS:-16MB}
      -c checkpoint_completion_target=${POSTGRES_CHECKPOINT_TARGET:-0.9}
      -c random_page_cost=${POSTGRES_RANDOM_PAGE_COST:-1.1}
      -c log_statement=${POSTGRES_LOG_STATEMENT:-mod}
      -c log_min_duration_statement=${POSTGRES_LOG_MIN_DURATION:-1000}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./volumes/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${PGUSER:-postgres} -d ${POSTGRES_DB:-db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: ${DB_MEMORY_LIMIT:-512M}
          cpus: '${DB_CPU_LIMIT:-0.5}'
        reservations:
          memory: ${DB_MEMORY_RESERVE:-256M}
          cpus: '${DB_CPU_RESERVE:-0.25}'
    logging: *default-logging
    networks:
      - app-network

  web:
    <<: *restart-policy
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web
    environment:
      <<: *shared-env
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s 
    networks:
      - app-network

  jenkins:
    <<: *restart-policy
    image: jenkins/jenkins:${JENKINS_VERSION:-2.504.2-lts}
    container_name: exam_jenkins
    privileged: true
    user: "${JENKINS_USER_ID:-root}:${JENKINS_GROUP_ID:-root}"
    environment:
      JENKINS_OPTS: "${JENKINS_OPTS:---prefix=/jenkins}"
      JAVA_OPTS: >
        -Djenkins.install.runSetupWizard=false
        -Djava.awt.headless=true
        -Xmx${JENKINS_MEMORY:-1024}m
        -Xms${JENKINS_MEMORY_MIN:-512}m
        -XX:+UseG1GC
        -XX:+UseCompressedOops
        -Dfile.encoding=UTF-8
        -Dhudson.model.DirectoryBrowserSupport.CSP=""
      JENKINS_URL: "${JENKINS_URL:-https://jenkins.astrekoi.ru/}"
      JENKINS_PLUGINS: >
        workflow-aggregator:latest
        git:latest
        docker-workflow:latest
        pipeline-stage-view:latest
        blueocean:latest
        credentials:latest
        ssh-agent:latest
        workflow-api:latest
        workflow-basic-steps:latest
        workflow-cps:latest
        workflow-durable-task-step:latest
        pipeline-model-definition:latest
        pipeline-utility-steps:latest
        docker-commons:latest
        docker-java-api:latest
        github:latest
        github-branch-source:latest
        pipeline-github-lib:latest
        timestamper:latest
        ws-cleanup:latest
        build-timeout:latest
        ant:latest
        gradle:latest
    ports:
      - "${JENKINS_PORT:-9090}:8080"
      - "${JENKINS_AGENT_PORT:-50000}:50000"
    volumes:
      - ./volumes/jenkins/home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "http://localhost:8080/jenkins/login"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging: *default-logging
    networks:
      - app-network

  nginx:
    <<: *restart-policy
    image: nginx:${NGINX_VERSION:-1.25-alpine}
    container_name: exam_nginx
    environment:
      API_PORT: 5000
      JENKINS_PORT: 8080
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: ${NGINX_TEMPLATE_SUFFIX:-.template}
      NGINX_ENVSUBST_OUTPUT_DIR: ${NGINX_OUTPUT_DIR:-/etc/nginx/conf.d}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:rw
      - ./volumes/nginx/logs:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
      jenkins:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/server/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: ${NGINX_MEMORY_LIMIT:-128M}
          cpus: '${NGINX_CPU_LIMIT:-0.2}'
    logging: *default-logging
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    name: ${NETWORK_NAME:-exam_app_network}
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
